{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","key","id","onClick","onClickCallback","value","Board","squareList","squares","squareComponents","i","length","j","push","generateSquareComponents","generateSquares","currentId","row","col","App","useState","setSquares","current","changeCurrent","switchPlayer","resetGame","winner","checkForWinner","event","newSquares","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb132993.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n \n  const onSquareClick = () => { //event listener\n    props.onClickCallback(props.id);\n  }\n\n  return <button\n    className=\"square\"  key={props.id} onClick={onSquareClick} >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  let squareComponents = [];\n  for(let i=0; i < squares.length; i++){\n    for(let j=0; j < squares.length; j++){\n      squareComponents.push(<Square key={squares[i][j].id} value={squares[i][j].value} id={squares[i][j].id} onClickCallback={onClickCallback} />);\n    }\n  }\n  return squareComponents;\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  \n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\n\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n  return squares;\n}\n\n\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares()); \n  const [current, changeCurrent] = useState(true);\n\n  const onClickCallback = (event) => {  //event handler\n    let newSquares =[];\n    for(let i = 0; i < squares.length; i++){\n      for(let j = 0; j < squares.length; j++){\n        if(event === squares[i][j].id){\n          squares[i][j][\"value\"] = (switchPlayer() ? PLAYER_2 : PLAYER_1);\n        }\n      }\n      newSquares.push(squares[i]);\n    }\n    setSquares(newSquares);\n  }\n  \n  //toggle back a forth for player turn\n  function switchPlayer() {\n    changeCurrent(!current);\n    return current;\n  };\n\n  const checkForWinner = () => {\n    //checks diagonals\n    if(squares[0][0].value === squares[1][1].value  && squares[0][0].value === squares[2][2].value && squares[0][0].value !== '' ){\n      return squares[0][0].value;\n    }else if(squares[0][2].value === squares[1][1].value && squares[0][2].value === squares[2][0].value && squares[0][2].value !== ''){\n      return squares[0][2].value;\n    }else{\n      //checks rows and columns \n      for(let i = 0; i < squares.length; i++){\n        for(let j = 0; j < squares.length; j++){\n          if(squares[i][0].value === squares[i][1].value && squares[i][0].value === squares[i][2].value && squares[i][0].value !== '' ){\n            return squares[i][0].value\n          }else if(squares[0][j].value === squares[1][j].value && squares[0][j].value === squares[2][j].value && squares[0][j].value !== ''){\n            return squares[0][j].value;\n          }\n        }\n      }\n    }\n    return -1;\n  }\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n  }\n\n  let winner = checkForWinner();\n  if(winner !== -1){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>React Tic Tac Toe</h1>\n          <h2>The winner is  {winner}</h2>\n          <button onClick={resetGame}>Reset Game</button>\n        </header>\n        <main>\n            <p> YAY! </p>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2> Still playing...  </h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={onClickCallback} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}